# Elasticluster Configuration Template
# ====================================
#
# This is a TEMPLATE CONFIGURATION file for ElastiCluster.  You will
# need to edit it and replace some placeholder values before the file
# can be read without errors and you can actually start creating
# clusters.  A complete reference for the syntax and contents of this
# file can be found at:
# http://elasticluster.readthedocs.io/en/latest/configure.html
#
# A set of commented examples can be found at:
# https://github.com/gc3-uzh-ch/elasticluster/tree/master/examples


# Cloud Section
# =============
#
# A `cloud` section named `<name>` starts with:
#
# [cloud/<name>]
#
# The cloud section defines all properties needed to connect to a
# specific cloud provider. See
# http://elasticluster.readthedocs.io/en/latest/configure.html#cloud-section
# for the different options.
#
# You can define as many cloud sections you want, assuming you have
# access to different cloud providers and want to deploy different
# clusters in different clouds. The mapping between cluster and cloud
# provider is done in the `cluster` section (see later).
#
# Examples
# --------
#
# A larger set of commented examples can be found at:
# https://github.com/gc3-uzh-ch/elasticluster/tree/master/examples
#

# The following example should be easy to adapt to any OpenStack-based
# cloud::
#
[cloud/openstack]
provider=openstack
#
# the following keys are optional: if missing, value will be taken from the
# corresponding `OS_*` environmental variable (e.g., instead of writing
# `password=` here, you can set `OS_PASSWORD` in the environment)
#
#auth_url=https://openstack.example.com:5000/v2.0
#project_name=elasticluster
#username=me
#password=secret
#region_name=nova
#
# if `identity_api_version` is missing (and `OS_IDENTITY_API_VERSION` is not set
# in the environment) then ElastiCluster will try to autodetect
#
#identity_api_version=2


# To use Amazon's EC2 (region eu-west-1) you can use:
#
[cloud/amazon-eu-west-1]
provider=ec2_boto
ec2_url=https://ec2.eu-west-1.amazonaws.com
#ec2_access_key=*** LOOK THIS UP IN THE WEB-BASED CONSOLE ***
#ec2_secret_key=*** LOOK THIS UP IN THE WEB-BASED CONSOLE ***
# note: AMIs differ from one region to the other -- if you change the region here,
# you might need to change the `image_id` setting in the cluster section below
ec2_region=eu-west-1
#request_floating_ip=False


# For Google Compute Engine you can use a configuration stanza like the following.
# Find the `gce_client_id` and `gce_client_secret` values by following instructions at:
# http://googlegenomics.readthedocs.io/en/latest/use_cases/setup_gridengine_cluster_on_compute_engine/index.html#index-obtaining-client-id-and-client-secrets
#
[cloud/google]
provider=google
#gce_client_id=****REPLACE WITH YOUR CLIENT ID****
#gce_client_secret=****REPLACE WITH YOUR SECRET KEY****
#gce_project_id=****REPLACE WITH YOUR PROJECT ID****


# Login Section
# ===============
#
# A `login` section named `<name>` starts with:
#
# [login/<name>]
#
# This section contains information on how to access the instances
# started on the cloud, including SSH user name and the identity keys
# to use.
#
# For more details, see: http://elasticluster.readthedocs.io/en/latest/configure.html#login-section

# Examples
# --------
#
# A larger set of commented examples can be found at:
# https://github.com/gc3-uzh-ch/elasticluster/tree/master/examples
#

# For a typical ubuntu machine, both on Amazon and most OpenStack
# providers, these values should be fine:

[login/ubuntu]
image_user=ubuntu
image_sudo=True
user_key_name=elasticluster
user_key_private=~/.ssh/id_rsa
user_key_public=~/.ssh/id_rsa.pub

# For Google Compute Engine, something like the following should be
# used instead.
#
# In contrast to other cloud providers, GCE creates a personal account on each
# VM so you effectively re-use the same `[login/google]` section across
# different VM images.
[login/google]
image_user=****REPLACE WITH YOUR GOOGLE USERID (just the userid, not email)****
image_sudo=yes
user_key_name=elasticluster
# You can generate the keypair with the command: `gcloud compute config-ssh`
user_key_private=~/.ssh/google_compute_engine
user_key_public=~/.ssh/google_compute_engine.pub


# Setup Section
# =============
#
# A `setup` section named `<name>` starts with:
#
# [setup/<name>]
#
# This section contain information on *how to setup* a cluster. After
# the cluster is started, elasticluster will run Ansible (the "setup
# provider") in order to configure it.
#
# A ``setup`` section is mostly independent of any other, and can be
# easily re-used across multiple clouds and base OS images -- that's the
# whole point of ElastiCluster!
#
# Further details at: http://elasticluster.readthedocs.io/en/latest/configure.html#setup-section

# Examples
# --------
#
# A larger set of commented examples can be found at:
# https://github.com/gc3-uzh-ch/elasticluster/tree/master/examples
#

# a `setup` section is mostly independent of any other
[setup/gridengine]
provider=ansible
frontend_groups=gridengine_master
compute_groups=gridengine_clients

[setup/pbs]
provider=ansible
# this shows how to combine multiple Ansible groups into a class of nodes
frontend_groups=pbs_master,maui_master
compute_groups=pbs_clients

[setup/slurm]
frontend_groups=slurm_master
compute_groups=slurm_worker
# `submit` nodes are normally not used but are available if
# you want to load-balance SSH access to the cluster
submit_groups=slurm_submit,glusterfs_client

# install NIS/YP to manage cluster users
global_var_multiuser_cluster=yes


# Cluster Section
# ===============
#
# A `cluster` section named `<name>` starts with:
#
# [cluster/<name>]
#
# The cluster section defines a `template` for a cluster. This section
# has references to each one of the other sections and define the
# image to use, the default number of compute nodes and the security
# group.
#
# Some configuration keys can be overridden for specific node kinds.
# The way to do this is to create a section named like this::
#
#     [cluster/<name>/<kind>]
#
# Any configuration specified in this section would take precedence over
# the values given in section ``[cluster/<name>]``, but only for nodes
# of class ``<kind>``.

# Examples
# --------
#
# A larger set of commented examples can be found at:
# https://github.com/gc3-uzh-ch/elasticluster/tree/master/examples
#

# a simple example, running a SoGE cluster on GCE
[cluster/gridengine-on-gce]
setup=gridengine
frontend_nodes=1
compute_nodes=2
ssh_to=frontend

# this is cloud specific
cloud=google
security_group=default
flavor=n1-standard-1

image_id=****REPLACE WITH OUTPUT FROM: gcloud compute images list | grep debian | cut -f 1 -d " "****



[cluster/slurm-on-ubuntu14]
setup=slurm
master_nodes=1
worker_nodes=4
ssh_to=master

# this is cloud-specific info (using OpenStack for the example)
cloud=openstack
flavor=4cpu-16ram-hpc
network_ids=c86b320c-9542-4032-a951-c8a068894cc2
security_group=default

# Ubuntu 14.04
image_id=bab386b3-2c21-4a67-a146-a658668ac096

# `login` info is -in theory- image-specific
login=ubuntu


[cluster/torque]
setup=pbs
ssh_to=frontend
frontend_nodes=1
compute_nodes=2

# this is cloud-specific info
cloud=amazon-eu-west-1
security_group=default
flavor=m1.small

# CentOS image
image_id=ami-0000004f

# `login` info is -in theory- image-specific
login=centos
