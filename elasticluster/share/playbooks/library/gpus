#!/usr/bin/env python
#
# Test run this module with::
#
#        ansible -m gpus -M /path/to/librayr/dir hostname
#
"""
Return info about NVidia GPUs on the system.

For each NVidia "3D controller" the following information are
returned:

* PCI slot, in the form used by Linux in ``/sys/bus/pci/devices/`` (i.e., ``domain:bus:device.function``, e.g. ``0000:00:02.0``)
* PCI vendor, as a string rendering of the hexadecimal ID (i.e., always ``10de`` for NVidia) and as a human-readable name (e.g., ``NVIDIA Corporation``)
* card model name, both short single-word ID (e.g., ``GM108M``) and long commercial name (e.g., ``GeForce 940MX``)
* Linux device file (e.g., ``/dev/nvidia0``)

.. warning::

  The Linux device file is currently "guessed" by a very crude
  algorithm: we assume that every GPU device will have the name
  ``/dev/nvidiaX`` where ``X`` is the GPU index starting from 0.  We
  also assume that GPUs are enumerated in the order of increasing PCI
  slot: e.g., if a system has two GPU cards, one at PCI slot
  ``00:04.0`` and another one at ``00:05.0``, the former gets index 0
  (hence, device name ``/dev/nvidia0``) and the latter index 1 (hence,
  device name ``/dev/nvidia1``).

In addition, count of GPUs (both total and per-model) are provided.

Example output::

  localhost | SUCCESS => {
      "ansible_facts": {
          "gpu_count": {
              "GM108M": 1
          },
          "gpu_count_total": 1,
          "gpus": [
              {
                  "device": "/dev/nvidia0",
                  "model_name": "GM108M",
                  "model_name_long": "GeForce 940MX",
                  "pci_slot": "0000:02:00.0",
                  "pci_vendor_id": "10de",
                  "vendor_name": "NVIDIA Corporation"
              }
          ]
      },
      "changed": false
  }
"""

from collections import defaultdict
import json
import os
import re
import shlex
from subprocess import check_output
import sys
from urllib import urlopen

from ansible.module_utils.basic import AnsibleModule


def _parse_pci_slot(slot):
    """
    Convert a PCI slot (e.g., ``00:1f.2``) to a tuple of integers.
    """
    parts = slot.split(':')
    dev, funct = parts.pop().split('.')
    funct = int(funct, 16)
    dev = int(dev, 16)
    bus = int(parts.pop(), 16)
    if len(parts) == 1:
        domain = int(parts.pop(), 16)
    else:
        domain = 0
    return (domain, bus, dev, funct)


def _format_pci_slot(slot):
    return ('%04x:%02x:%02x.%1x' % _parse_pci_slot(slot))


def get_pci_device_name(parts):
    vendor, model_name_short, model_name_long = None, None, None
    # normally, `lspci -vmm` gives us all the info we need...
    try:
        vendor, model_name_short, model_name_long = _get_pci_device_name_lspci(parts)
    except Exception:
        pass
    # ...however, when HW is new, the OS-provided `pci_ids.txt` file
    # does not have entries for it (e.g., Ubuntu 16.04 and NVIDIA
    # Tesla V100 in March 2018), so we try to get the result from the
    # online PCI IDs database.  (But in order to keep the parsing
    # simple, we just get one single entry from the page, which might
    # be incorrect.)
    if (model_name_short is None) or (model_name_long is None):
        try:
            model_name_short2, model_name_long2 = _get_pci_device_name_http(parts)
            model_name_short = (model_name_short or model_name_short2)
            model_name_long = (model_name_long or model_name_long2)
        except Exception:
            pass
    # if any of the state variables is still `None`, we were not able
    # to find a value for it, so return "Unknown"
    return (vendor or "Unknown",
            model_name_short or "Unknown",
            model_name_long or "Unknown")

def _get_pci_device_name_lspci(parts):
    vendor = "Unknown"
    model_name_short = None
    model_name_long = None
    lspci_output = check_output(['lspci', '-vmm', '-s', parts[0]])
    for line in lspci_output.split('\n'):
        # skip blank lines
        line = line.strip()
        if not line:
            continue
        key, value = line.split(':', 1)
        key = key.strip()
        value = value.strip()
        if key == 'Vendor':
            vendor = value
        elif key == 'Device':
            if ' ' in value and '[' in value and ']' in value:
                # e.g., `Device: GM108M [GeForce 940MX]`
                first_space = value.index(' ')
                model_name_short = value[:first_space]
                open_bracket = value.index('[')
                close_bracket = value.index(']')
                model_name_long = value[(open_bracket+1):close_bracket]
        else:
            continue
    return vendor, model_name_short, model_name_long

_DB_ENTRY_NAME_RE = re.compile(r'<p>Name: (?P<short>[^ ]+) \[(?P<long>.+)\]</')

def _get_pci_device_name_http(parts):
    db_entry_url = ('http://pci-ids.ucw.cz/read/PC/{vendor_id}/{model_id}'
                    .format(vendor_id=parts[2], model_id=parts[3]))
    db_entry_html = urlopen(db_entry_url).read()
    match = _DB_ENTRY_NAME_RE.search(db_entry_html)
    if match:
        return match.group('short'), match.group('long')
    else:
        return None, None


def get_pci_gpu_info():
    result = []

    # gather info on NVidia "3D controllers" on the system.
    lspci_output = check_output(['lspci', '-n', '-m'])
    for line in lspci_output.split('\n'):
        # skip blank lines
        line = line.strip()
        if not line:
            continue
        parts = shlex.split(line)
        if len(parts) < 3:
            # FIXME: log unexpected input!
            continue
        if parts[1] == '0302' and parts[2] == '10de':
            slot = _format_pci_slot(parts[0])
            vendor_name, model_name, model_name_long = get_pci_device_name(parts)
            result.append({
                'pci_slot': slot,
                'pci_vendor_id': parts[2],
                'vendor_name' : vendor_name,
                'model_name': model_name,
                'model_name_long': model_name_long,
            })

            # sort results according to PCI bus ID
    result.sort(key=(lambda gpu: _parse_pci_slot(gpu['pci_slot'])))

    # now add device nodes in this order
    # FIXME: this is a very crude way of enumerating devices and we
    # are making totally unverified assumptions about what the NVidia
    # dirver does.. on the other hand: (1) if the NVidia driver is not
    # loaded, the device nodes are not there; (2) since it's
    # closed-source, we cannot inspect it to see what it does, (3)
    # it's not included by default in any major distribution so it's
    # likely *not* loaded when this module is running...
    for idx, gpu in enumerate(result):
        gpu['device'] = ('/dev/nvidia%d' % idx)
    return result


def main():
    global module
    module = AnsibleModule(
        argument_spec = {},
        supports_check_mode = True,
    )

    output = {
        "changed" : False,
        "ansible_facts": {}
    }
    ansible_facts = output['ansible_facts']

    gpu_info = get_pci_gpu_info()
    ansible_facts['gpu_count_total'] = len(gpu_info)
    ansible_facts['gpus'] = gpu_info
    # compute counts by model (for SLURM's `gres.conf`)
    counts = defaultdict(int)
    for gpu in gpu_info:
        counts[gpu['model_name']] += 1
    ansible_facts['gpu_count'] = counts

    print json.dumps(output)

try:
    main()
    sys.exit(os.EX_OK)
except Exception as err:
    print json.dumps({
        'failed': True,
        'msg': ('{0}: {1}'.format(err.__class__.__name__, err)),
    })
    sys.exit(os.EX_SOFTWARE)
