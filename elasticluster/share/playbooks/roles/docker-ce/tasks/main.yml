---
# Install the following deps:
# 1) apt-transport-https to enable
#   TLS in the transport of packages coming
#   from APT repositories
# 2) ca-certificates, a bundle of common certificate authorities' certificates
- name: 'install docker dependencies'
  apt:
    name: '{{ item }}'
    state: 'present'
  with_items:
    - 'apt-transport-https'
    - 'ca-certificates'
  loop: '{{groups.docker_node}}'


# We must inform apt about the docker public key.
- name: 'add docker key'
  apt_key:
    url: 'https://download.docker.com/linux/ubuntu/gpg'
    id: '9DC858229FC7DD38854AE2D88D81803C0EBFCD88'
    state: 'present'
  register: 'add_repository_key'
  ignore_errors: true
  loop: '{{groups.docker_node}}'


# Add the official docker apt repository so that `apt`
# can list packages from it and then fetch them from
# there.
# With `update_cache` we force an `apt update` which
# would essentially be the equivalent of updating the
# list of packages from a list of source repositories.
- name: 'add Docker repository'
  apt_repository:
    repo: '{{ docker_apt_repository }}'
    state: 'present'
    update_cache: 'yes'


# Install the latest docker CE
- name: 'install docker Community Edition'
  apt:
    name: 'docker-ce'
    state: 'present'
  loop: '{{groups.docker_node}}'


# Enable docker as service by default
- name: 'enable docker systemd service'
  service:
    name: 'docker'
    state: 'started'
    enabled: 'yes'
  loop: '{{groups.docker_node}}'


# Configure the docker daemon via the configuration
# file /etc/docker/daemon.json
- name: 'prepare default daemon configuration'
  copy:
    src: 'daemon.json'
    dest: '/etc/docker/daemon.json'
  loop: '{{groups.docker_node}}'

# Prune dangling containers by setting a cron job to clean thing ups
- name: 'set periodic docker system prune'
  cron:
    name: 'docker-prune'
    minute: '0'
    hour: '*/2'
    job: 'docker container prune -f'
  loop: '{{groups.docker_node}}'


# Add unprivileged users to the `docker` group
- name: 'add users to docker group'
  user:
    name: '{{ item }}'
    groups: 'docker'
    append: 'yes'
  with_items: '{{ docker_group_members }}'
  when: 'docker_group_members is defined'
  loop: '{{groups.docker_node}}'

