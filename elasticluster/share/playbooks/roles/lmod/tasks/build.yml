---

#
# Build Lmod from sources
#

- name: Install build-time dependencies (Debian-compatible)
  package:
    name:
      - gcc
      - libc6-dev
      - make
    state: '{{ pkg_install_state }}'
  when: is_debian_compatible


- name: Install build-time dependencies (RHEL-compatible)
  package:
    name: "@Development tools"
    state: '{{ pkg_install_state }}'
  when: is_rhel_compatible


- name: Install required dependencies of Lmod (Debian-compatible)
  package:
    name:
      - pkg-config
      - tcl
    state: '{{ pkg_install_state }}'
  when: is_debian_compatible


- name: Install required dependencies of Lmod (RHEL-compatible)
  package:
    name:
      - pkgconfig
      - tcl
    state: '{{ pkg_install_state }}'
  when: is_rhel_compatible


# - name: Install optional dependencies of Lmod
#   package:
#     name: '{{ item }}'
#     state: '{{ pkg_install_state }}'
#   loop:
#     - lua-term
#   ignore_errors: True


- name: Create required directories
  file:
    dest='{{item}}'
    state=directory
    mode=0755
  loop:
    - '{{lmod_install_dir}}/'
    - '{{lmod_source_dir}}/'
    - '{{lmod_build_dir}}/'
    - '{{MODULES_ROOT}}/'


- name: Download sources
  get_url:
    url: '{{ lmod_source_url }}'
    dest: '{{ lmod_build_dir }}'
    validate_certs: '{{ not insecure_https_downloads|default("no")|bool }}'


# XXX: Ansible issues a warning message "Consider using unarchive module rather
# than running tar"; however, `unarchive` seems to misteriously fail on CentOS
# 7.2.1511, and there have been many reports of it failing when file names
# contain "unexpected" characters (e.g., spaces or non-ASCII characters)
#
# If `unarchive` worked correctly, this would be the Ansible stanza to use::
#
#   - name: Extract sources
#     unarchive:
#       src: '{{ lmod_build_dir }}/Lmod-{{ LMOD_VERSION }}.tar.gz'
#       dest: '{{ lmod_build_dir }}/'
#       creates: '{{ lmod_build_dir }}/Lmod-{{ LMOD_VERSION }}/configure'
#       copy: no
#
- name: Extract sources
  command:
    'tar -xzf "{{ lmod_build_dir }}/Lmod-{{LMOD_VERSION}}.tar.gz" -C "{{ lmod_build_dir }}"'
  args:
    creates='{{ lmod_build_dir }}/Lmod-{{LMOD_VERSION}}/configure'


- name: Run `./configure`
  shell: |
    # may need to init the Lua environment
    if [ -r /etc/profile.d/lua.sh ]; then
      . /etc/profile.d/lua.sh
    fi
    ./configure --prefix="{{ lmod_root }}" --with-module-root-path="{{ MODULES_ROOT }}" {{ lmod_configure_extra_opts }}
  args:
    chdir:   '{{ lmod_build_dir }}/Lmod-{{ LMOD_VERSION }}'
    creates: 'makefile'
  environment:
    PATH: "{{ lua_exe|dirname or '/usr/bin' }}:{{ansible_env.PATH}}"


# ATM rather pointless, as Lmod's `make all` just prints "done", but you never
# know when they are going to introduce some real work here...
- name: Run `make`
  shell: |
    # may need to init the Lua environment
    if [ -r /etc/profile.d/lua.sh ]; then
      . /etc/profile.d/lua.sh
    fi
    make
  args:
    chdir: '{{ lmod_build_dir }}/Lmod-{{ LMOD_VERSION }}'
  environment:
    PATH: "{{ lua_exe|dirname or '/usr/bin' }}:{{ansible_env.PATH}}"


- name: Is installation directory writable?
  command: test -w "{{lmod_install_dir}}/"
  ignore_errors: yes
  # need to force Ansible not to perform tasks as `root` automatically, else the
  # `make install` task up next fails with "Permission denied"
  become: no
  register: lmod_install_dir_writable


- name: Run `make install`
  shell: |
    # may need to init the Lua environment
    if [ -r /etc/profile.d/lua.sh ]; then
      . /etc/profile.d/lua.sh
    fi
    make install
  args:
    chdir:   '{{ lmod_build_dir }}/Lmod-{{ LMOD_VERSION }}'
    creates: '{{lmod_install_dir}}/libexec/lmod'
  environment:
    PATH: "{{ (lua_exe|dirname) or '/usr/bin' }}:{{ansible_env.PATH}}"
