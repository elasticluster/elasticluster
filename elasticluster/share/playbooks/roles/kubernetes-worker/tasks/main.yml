---

- name: Remove swapfile from /etc/fstab
  mount:
    name: swap
    fstype: swap
    state: absent
  when: disable_swap

- name: Disable swap
  command: swapoff -a
  when: disable_swap and ansible_swaptotal_mb > 0

- include: ubuntu-14.yml
  when: is_earlier_than_ubuntu_16_04

- name: Retrieve systemd files for github-release kube_source_type type
  include: systemd.yml
  when: kube_source_type == "github-release" or is_ubuntu_16_04_or_later

- name: Install conntrack (kube-proxy's runtime dependency)
  action: "{{ ansible_pkg_mgr }}"
  args:
    name: conntrack
    state: latest
  when: is_ubuntu

# Change default value of kube_source_type
- name: Force kube_source_type to github
  set_fact:
    kube_source_type: "github-release"
  when: is_ubuntu

# Install kubernetes node components
- name: Install kubernetes node
  action: "{{ ansible_pkg_mgr }}"
  args:
    name: kubernetes-node
    state: latest
  notify:
    - restart daemons
  when: kube_source_type == "packageManager"
  tags:
    - binary-update

- include: install-github-release.yml
  when: kube_source_type == "github-release"
  tags:
    - binary-update

- name: Install kubernetes node runtime dependencies
  action: "{{ ansible_pkg_mgr }}"
  args:
        name: "{{ item }}"
        state: latest
  with_items:
  - socat
  - tar
  - git
  when: kube_source_type == "github-release" and (is_rhel_compatible or is_debian_compatible)

# enable cpu and memory accounting for systemd services by default
- name: Create systemd dropin directory
  file: path=/etc/systemd/system/system.conf.d state=directory mode=0755
  when: kube_source_type == "github-release" and (is_rhel_compatible or is_debian_compatible)

- name: Enable cpu and memory accounting for systemd services
  copy: src=kubernetes-accounting.conf dest="/etc/systemd/system/system.conf.d/kubernetes-accounting.conf"
  notify:
    - reload systemd
  when: kube_source_type == "github-release" and (is_rhel_compatible or is_debian_compatible)

- name: Get the node token values
  slurp:
    src: "{{ kube_token_dir }}/{{ item }}-{{ inventory_hostname }}.token"
  with_items:
    - "system:kubelet"
    - "system:proxy"
  register: tokens
  delegate_to: "{{ groups['masters'][0] }}"

- name: Create the kubelet working directory
  file: path={{ kubelet_working_dir }} state=directory

- name: Write the config files for kubelet
  template: src=kubelet.j2 dest={{ kube_config_dir }}/kubelet

- name: Write the kubecfg (auth) file for kubelet
  template: src=kubelet.kubeconfig.j2 dest={{ kube_config_dir }}/kubelet.kubeconfig

- name: Make sure manifest directory exists
  file: path={{ kube_manifest_dir }} state=directory

- name: Enable kubelet
  service: name=kubelet enabled=yes
  when: services_enabled == true

- name: Start kubelet
  service: name=kubelet state=started

- name: Write the config files for proxy
  template: src=proxy.j2 dest={{ kube_config_dir }}/proxy

- name: Write the kubecfg (auth) file for kube-proxy
  template: src=proxy.kubeconfig.j2 dest={{ kube_config_dir }}/proxy.kubeconfig

- name: Enable proxy
  service: name=kube-proxy enabled=yes
  when: networking != "opencontrail" and services_enabled == true

- name: Start proxy
  service: name=kube-proxy state=started

- name: Run Ubuntu post tasks
  include: ubuntu-14-post.yml
  when: not is_earlier_than_ubuntu_16_04
  tags: configure

- ufw:
    state: enabled
    rule: allow
    proto: tcp
    port: 10250

- ufw:
    rule: allow
    route: yes
    interface: docker0
    direction: in

- ufw:
    rule: allow
    route: yes
    interface: docker0
    direction: out

- name: restart kubelet
  service: name=kubelet state=restarted

- name: Restart proxy
  service: name=kube-proxy state=restarted
