---
#
# Set up the package manager and its Ansible module for installing packages
#

# see Issues #541 and #548
- name: Ensure Google Cloud signing keys are available
  get_url:
    url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
    dest: /etc/apt/trusted.gpg.d/google-cloud-packages-archive-keyring.gpg
    backup: yes
    validate_certs: '{{ not insecure_https_downloads|default("no")|bool }}'
  when: 'elasticluster.cloud.gcloud_project_id is defined'

- name: Ensure extra repositories are present (Ubuntu)
  apt_repository:
    repo="deb http://archive.ubuntu.com/ubuntu {{ansible_distribution_release}} universe multiverse"
    state=present
    mode=0444
  when: is_ubuntu

- name: Ensure the APT package cache is updated
  apt:
    update_cache: yes
    cache_valid_time: 0
    allow_unauthenticated: '{{ not insecure_https_downloads|default("no")|bool }}'

- name: Install Ansible `apt` module dependencies
  # the `apt` module depends on `python-apt` to do package-level work,
  # so we need to resort to a raw invocation of `apt-get`
  command: |
    apt-get install -y {{item.name}}
  args:
    creates: '{{item.creates}}'
    # we know about the `apt:` module but cannot use it here,
    # so suppress warning
    warn: no
  become: yes
  loop:
    - { name: 'python-apt', creates: '/usr/share/doc/python-apt' }

- name: Uninstall `aptitude`
  # since Ansible 2.6, the `apt` module conflicts with `aptitude` when
  # `allow_unauthenticated: yes` is used -- so remove it and let
  # Ansible use `apt-get` instead
  command: |
    apt-get remove --purge -y {{item.name}}
  args:
    removes: '{{item.creates}}'
    # we know about the `apt:` module but cannot use it here,
    # so suppress warning
    warn: no
  become: yes
  loop:
    - { name: 'aptitude', creates: '/usr/bin/aptitude' }

- name: Upgrade all installed packages to latest version
  apt:
    upgrade: safe
    allow_unauthenticated: '{{ not insecure_https_downloads|default("no")|bool }}'
  when: 'upgrade_packages|default(True)'

# the following seemingly pointless obsession with kernel versions is
# needed to determine whether the `apt upgrade` stanza above actually
# upgraded the kernel: if so, we may need to reboot or ignore some
# errors down the road on Debian 9... (See issue #609 for context)
- name: Determine running Linux kernel package version
  shell: |
    uname -a | cut -d' ' -f7
  register: debian_running_kernel_package_version

- name: Determine installed Linux kernel package version
  shell: |
    dpkg-query --show --showformat '${Version}\n' linux-image-$(uname -r)
  register: debian_installed_kernel_package_version

- name: Record that kernel was upgraded
  set_fact:
    debian_kernel_upgraded: '{{ debian_running_kernel_package_version != debian_installed_kernel_package_version }}'

- name: Reboot if kernel was upgraded
  # the initial `sleep` command is there to give Ansible time to
  # background the task and disconnect; otherwise the SSH connection
  # is torn by the reboot and Ansible marks the host as "unreachable"
  shell: |
    sleep 3;
    /sbin/shutdown -r now "Rebooting to load new kernel ...";
  async: 1
  poll: 0
  register: _common_reboot
  when: 'allow_reboot|default(false) and debian_kernel_upgraded|default(false)'

- name: Wait for server to come up again (max 5 minutes)
  become: no
  wait_for:
    host: "{{ ansible_host }}"
    search_regex: 'OpenSSH'
    port: 22
    delay: 15
    timeout: 300
    sleep: 5
  delegate_to: localhost
  when: '_common_reboot is not skipped'

- name: Record that kernel is now up-to-date
  set_fact:
    debian_kernel_upgraded: false
  when: '_common_reboot is not skipped'


- name: Ensure additional packages are installed
  apt:
    name:
      - apt-transport-https
      # these are required by Ansible's `debconf` module
      - debconf
      - debconf-utils
    state: '{{ pkg_install_state }}'
    allow_unauthenticated: '{{ not insecure_https_downloads|default("no")|bool }}'


# Apparently some systemd commands (e.g., `hostnamectl` -- possibly others)
# *require* D-Bus but the Debian 8 cloud VM image does not have it installed
# (see issues #392, #393).  So, ensure it is installed.
- name: Ensure additional packages are installed (Debian 8)
  apt:
    name: 'dbus'
    state: '{{ pkg_install_state }}'
    allow_unauthenticated: '{{ not insecure_https_downloads|default("no")|bool }}'
  when: 'is_debian_8_or_later'


- name: Provide workaround for https://github.com/ansible/ansible-modules-core/issues/4472
  set_fact:
    __at__: '='


- name: Install policy package for service autostart
  apt:
    name: 'policyrcd-script-zg2'
    state: '{{ pkg_install_state }}'
    allow_unauthenticated: '{{ not insecure_https_downloads|default("no")|bool }}'


- name: Install policy script for service autostart
  copy:
    dest: '/etc/policy-rc.d'
    src: 'etc/policy-rc.d'
    mode: 0555


# Debian's `adduser` (resp. `deluser`) scripts will run
# `/usr/local/sbin/adduser.local` (resp. `deluser.local`) if it
# exists.  Different installed systems need to perform different
# operations upon user addition/removal (e.g., SAMBA needs
# `smbpasswd`, SLURM needs `sacctmgr add user`), so we set up a
# directory where each playbook can drop their user management
# scripts, and they will be executed in order using run-parts(1)

- name: Allow other playbooks to deploy their own add/remove user scripts (I)
  file:
    dest: '/etc/{{ item }}.d'
    state: directory
    owner: root
    group: root
    mode: 0755
  loop:
    - adduser
    - deluser
  when: 'multiuser_cluster|default("true")|bool'

- name: Allow other playbooks to deploy their own add/remove user scripts (II)
  copy:
    dest: '/usr/local/sbin/{{ item }}.local'
    src: 'usr/local/sbin/{{ item }}.local'
    owner: root
    group: root
    mode: 0555
  loop:
    - adduser
    - deluser
  when: 'multiuser_cluster|default("true")|bool'
