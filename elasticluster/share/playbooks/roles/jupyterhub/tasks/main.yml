---
#
# Install JupyterHub and run it on port 443
#
# Follows installation instructions at:
# - https://github.com/jupyterhub/jupyterhub/blob/master/README.md#installation
#

- name: Fail if not Debian/Ubuntu compatible
  fail:
    msg: The JupyterHub role currently only supports Debian/Ubuntu
  when: 'not is_debian_compatible'


- name: Create directories
  file:
    path: '{{item}}'
    state: directory
    mode: 0755
  loop:
    - /etc/jupyterhub
    - /var/lib/jupyterhub

- name: Nodejs apt signing key
  apt_key:
    url: https://deb.nodesource.com/gpgkey/nodesource.gpg.key
    state: present

- name: Nodejs apt repo
  apt_repository:
    repo: deb https://deb.nodesource.com/node_8.x {{ansible_distribution_release}} main
    state: present

- name: Install SW dependencies
  apt:
    name: 'nodejs'
    state: '{{ pkg_install_state }}'
    allow_unauthenticated: '{{ not insecure_https_downloads|default("no")|bool }}'

- name: Install JupyterHub
  command: |
    /opt/anaconda3/bin/conda install jupyterhub -c conda-forge


- name: Create secret tokens
  shell: |
    openssl rand -hex {{ item.bytes/2 }} | tr -d '\n' > '/var/lib/jupyterhub/{{ item.name }}'
  args:
    creates: '/var/lib/jupyterhub/{{ item.name }}'
  loop:
    - { name: jupyterhub_cookie_secret, bytes: 32 }
    - { name: jupyterhub_proxy_auth_token, bytes: 64 }


# the following stanzas are needed to determine what exactly is the
# correct value for Jupyter's `data_files_path` config; Ansible's
# `with_first_found:` won't help since it's a *lookup* hence local to
# the machine where Ansible is running...
- name: Set Jupyter HTML data directory path
  set_fact:
    jupyterhub_data_files_path: '/opt/anaconda3/share/jupyterhub'
- name: Check that Jupyter data files path exists
  stat:
    path: '{{ jupyterhub_data_files_path }}'
    get_attributes: no
    get_checksum: no
    get_mime: no
  register: _jupyterhub_data_files
- name: Use older Jupyter HTML data directory path
  set_fact:
    jupyterhub_data_files_path: '/opt/anaconda3/share/jupyter/hub'
  when: 'not _jupyterhub_data_files.stat.exists'


- name: Deploy configuration file
  template:
    dest: '/etc/jupyterhub/jupyterhub_config.py'
    src:  'etc/jupyterhub/jupyterhub_config.py.j2'
    mode: 0400


# see: https://serialized.net/2013/04/simply-generating-self-signed-ssl-certs-with-ansible/
- name: Create self-signed SSL cert
  command: |
    openssl req -x509 -new -batch -days 3650 -subj "/O=ElastiCluster/OU=JupyterHub/CN={{ansible_fqdn}}"  -newkey rsa:2048 -nodes -outform PEM -keyout /etc/jupyterhub/jupyterhub.key.pem -out /etc/jupyterhub/jupyterhub.crt.pem -extensions usr_cert
  args:
    creates: /etc/jupyterhub/jupyterhub.key.pem


- name: Manage JupyterHub with `supervisord`
  import_role:
    name: supervisord
  vars:
    svd_program: jupyterhub
    svd_config: |
      # THIS FILE IS CONTROLLED BY ELASTICLUSTER
      # local modifications will be overwritten
      # the next time `elasticluster setup` is run!
      #

      # Control (auto)start of JupyterHub through `supervisor` (http://supervisord.org/)
      #
      # Initial version taken from:
      # https://github.com/jupyterhub/jupyterhub-tutorial/blob/master/supervisor/jupyterhub.conf

      [program:jupyterhub]
      command=/opt/anaconda3/bin/jupyterhub -f /etc/jupyterhub/jupyterhub_config.py
      directory=/var/lib/jupyterhub
      autostart=true
      autorestart=true
      startretries=3
      exitcodes=0,2
      stopsignal=TERM
      redirect_stderr=true
      stdout_logfile=/var/log/jupyterhub.log
      stdout_logfile_maxbytes=1MB
      stdout_logfile_backups=10
      user=root


- name: Allow inbound HTTPS connections
  iptables:
    action: insert
    chain: INPUT
    protocol: tcp
    destination_port: 443
    jump: ACCEPT
    state: present
  become: yes
