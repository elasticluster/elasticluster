/*
 * THIS FILE IS CONTROLLED BY ELASTICLUSTER
 * local modifications will be overwritten
 * the next time `elasticluster setup` is run!
 */

/* Global Configuration */
globals {
  daemonize = yes              
  setuid = yes             
  user = ganglia              
  gexec = no
  debug_level = 0               

  mute = no
  {% if inventory_hostname in groups.ganglia_master|default([]) %}
  deaf = no
  {% else %}
  deaf = yes
  {% endif %}             

  /* max UDP msg size is 64kB, minus 28 bytes of overhead */
  max_udp_msg_len = 65508

  host_dmax = 0 /* secs */
  cleanup_threshold = 300 /* secs */
  send_metadata_interval = 10 /* secs(?) */
}


/* Cluster data (only for display purposes) */
cluster {
  name = "ElastiCluster"
  /* owner = "University of Zurich" */
  latlong = "unspecified" 
  url = "{{hostvars[groups.ganglia_master[0]].ansible_default_ipv4.address}}/ganglia"
} 


/* The host section describes attributes of the host, like the location */ 
host { 
  location = "Data Center" 
} 


/* UDP Channels for Send and Recv;
   recv is ignored on nodes where deaf=yes */
udp_recv_channel {
  port = 8649
}


{% for master in groups.ganglia_master %}
udp_send_channel { 
  host = {{hostvars[master].ansible_default_ipv4.address}}
  port = 8649
  /* use a TTL as large as traceroute's pkts
     since we cannot make any assumption on the network topology in a cloud */
  ttl = 30
}
{% endfor %}


/* The TCP channel is where communication with `gmetad` (hence, ultimately, the
   web frontend) happens. If this is not configured, and `deaf=no` then `gmond`
   will malfunction and no communication with `gmetad` will take place. To err on
   the safe side, let's thus run the TCP channel on *all* `gmond`'s but only accept
   connections from other hosts in the cluster. */
tcp_accept_channel {
  port = 8649
  /* TCP channels are used to print out the XML description */
  acl {
    default = "deny"
    access {
      /* loopback */
      ip = 127.0.0.1
      mask = 8
      action = "allow"
    }
    /* allow all hosts in the cluster to connect */
    {% for node in groups.all -%}
    access {
      ip = {{ hostvars[node].ansible_default_ipv4.address }}
      mask = 32
      action = "allow"
    }
    {%- endfor %}
  }
}


/* Metrics

   Each metrics module that is referenced by gmond must be specified and
   loaded. If the module has been statically linked with gmond, it does not
   require a load path. However all dynamically loadable modules must include
   a load path. */
modules {
  module {
    name = "core_metrics"
  }
  module {
    name = "cpu_module"
    path = "{{ ganglia_gmond_modules_dir }}/modcpu.so"
  }
  module {
    name = "disk_module"
    path = "{{ ganglia_gmond_modules_dir }}/moddisk.so"
  }
  module {
    name = "load_module"
    path = "{{ ganglia_gmond_modules_dir }}/modload.so"
  }
  module {
    name = "mem_module"
    path = "{{ ganglia_gmond_modules_dir }}/modmem.so"
  }
  module {
    name = "net_module"
    path = "{{ ganglia_gmond_modules_dir }}/modnet.so"
  }
  module {
    name = "proc_module"
    path = "{{ ganglia_gmond_modules_dir }}/modproc.so"
  }
  module {
    name = "sys_module"
    path = "{{ ganglia_gmond_modules_dir }}/modsys.so"
  }
}


/* This collection group will cause a heartbeat (or beacon) to be sent every 
   20 seconds.  In the heartbeat is the GMOND_STARTED data which expresses 
   the age of the running gmond. */ 
collection_group { 
  collect_once = yes 
  time_threshold = 20 
  metric { 
    name = "heartbeat" 
  } 
} 


/* This collection group will send general info about this host every 1200 secs. 
   This information doesn't change between reboots and is only collected once. */ 
collection_group { 
  collect_once = yes 
  time_threshold = 1200 
  metric { 
    name = "cpu_num" 
    title = "CPU Count" 
  } 
  metric { 
    name = "cpu_speed" 
    title = "CPU Speed" 
  } 
  metric { 
    name = "mem_total" 
    title = "Memory Total" 
  } 
  /* Should this be here? Swap can be added/removed between reboots. */ 
  metric { 
    name = "swap_total" 
    title = "Swap Space Total" 
  } 
  metric { 
    name = "boottime" 
    title = "Last Boot Time" 
  } 
  metric { 
    name = "machine_type" 
    title = "Machine Type" 
  } 
  metric { 
    name = "os_name" 
    title = "Operating System" 
  } 
  metric { 
    name = "os_release" 
    title = "Operating System Release" 
  } 
  metric { 
    name = "location" 
    title = "Location" 
  } 
} 


/* This collection group will send the status of gexecd for this host every 300 secs */
collection_group {
  collect_once = yes 
  time_threshold = 300 
  metric { 
    name = "gexec" 
    title = "Gexec Status" 
  } 
} 


/* This collection group will collect the CPU status info every 20 secs,
   and send it every 300 seconds (minimum). */
collection_group {
  collect_every = 20 
  time_threshold = 300
  /* CPU status */ 
  metric { 
    name = "cpu_user"  
    value_threshold = "1.0" 
    title = "CPU User" 
  } 
  metric { 
    name = "cpu_system"   
    value_threshold = "1.0" 
    title = "CPU System" 
  } 
  metric { 
    name = "cpu_idle"  
    value_threshold = "5.0" 
    title = "CPU Idle" 
  } 
  metric { 
    name = "cpu_nice"  
    value_threshold = "1.0" 
    title = "CPU Nice" 
  } 
  metric { 
    name = "cpu_aidle" 
    value_threshold = "5.0" 
    title = "CPU aidle" 
  } 
  metric { 
    name = "cpu_wio" 
    value_threshold = "1.0" 
    title = "CPU wio" 
  } 
  /* The next two metrics are optional if you want more detail... 
     ... since they are accounted for in cpu_system.  
  metric { 
    name = "cpu_intr" 
    value_threshold = "1.0" 
    title = "CPU intr" 
  } 
  metric { 
    name = "cpu_sintr" 
    value_threshold = "1.0" 
    title = "CPU sintr" 
  } 
  */ 
} 

collection_group { 
  collect_every = 20
  time_threshold = 300
  /* Load Averages */ 
  metric { 
    name = "load_one" 
    value_threshold = "1.0" 
    title = "One Minute Load Average" 
  } 
  metric { 
    name = "load_five" 
    value_threshold = "1.0" 
    title = "Five Minute Load Average" 
  } 
  metric { 
    name = "load_fifteen" 
    value_threshold = "1.0" 
    title = "Fifteen Minute Load Average" 
  }
} 


/* This group collects the number of running and total processes */ 
collection_group { 
  collect_every = 80 
  time_threshold = 1200
  metric { 
    name = "proc_run" 
    value_threshold = "1.0" 
    title = "Total Running Processes" 
  } 
  metric { 
    name = "proc_total" 
    value_threshold = "1.0" 
    title = "Total Processes" 
  } 
}

/* This collection group grabs the volatile memory metrics every 40 secs and 
   sends them at least every 1800 secs. */
collection_group { 
  collect_every = 40 
  time_threshold = 1800
  metric { 
    name = "mem_free" 
    value_threshold = "1024.0" 
    title = "Free Memory" 
  } 
  metric { 
    name = "mem_shared" 
    value_threshold = "1024.0" 
    title = "Shared Memory" 
  } 
  metric { 
    name = "mem_buffers" 
    value_threshold = "1024.0" 
    title = "Memory Buffers" 
  } 
  metric { 
    name = "mem_cached" 
    value_threshold = "1024.0" 
    title = "Cached Memory" 
  } 
  metric { 
    name = "swap_free" 
    value_threshold = "1024.0" 
    title = "Free Swap Space" 
  } 
} 

collection_group { 
  collect_every = 40 
  time_threshold = 300 
  metric { 
    name = "bytes_out" 
    value_threshold = 4096 
    title = "Bytes Sent" 
  } 
  metric { 
    name = "bytes_in" 
    value_threshold = 4096 
    title = "Bytes Received" 
  } 
  metric { 
    name = "pkts_in" 
    value_threshold = 256 
    title = "Packets Received" 
  } 
  metric { 
    name = "pkts_out" 
    value_threshold = 256 
    title = "Packets Sent" 
  } 
}


collection_group {
  collect_every = 1800 
  time_threshold = 3600 
  metric { 
    name = "disk_total" 
    value_threshold = 1.0 
    title = "Total Disk Space" 
  } 
}

collection_group { 
  collect_every = 40 
  time_threshold = 1800
  metric { 
    name = "disk_free" 
    value_threshold = 1.0 
    title = "Disk Space Available" 
  } 
  metric { 
    name = "part_max_used" 
    value_threshold = 1.0 
    title = "Maximum Disk Space Used" 
  } 
}
