---

- name: Make sure etcd certificate vars are set
  fail:
    msg: "etcd certificates weren't slurped. Aborting ..."
  when: etcd_ca_cert is not defined or etcd_client_cert is not defined or etcd_client_key is not defined

- name: Make sure Flanneld etcd certs dir exists
  file:
   state: directory
   path: "{{ flannel_etcd_certs_dir }}"
   mode: "o-rwx"
   owner: root
   group: root

- name: Copy etcd certificates to nodes
  copy:
    content: "{{ item[1] }}"
    dest: "{{ item[0] }}"
    group: root
    owner: root
    mode: "0440"
  with_together:
    - [ "{{ flannel_etcd_cert_file }}", "{{ flannel_etcd_ca_file }}", "{{ flannel_etcd_key_file }}" ]
    - [ "{{ etcd_client_cert }}", "{{ etcd_ca_cert }}", "{{ etcd_client_key }}" ]

- name: Set facts about etcdctl command
  set_fact:
    peers: "{% for hostname in groups['etcd'] %}{% if etcd_url_scheme is defined %}{{ etcd_url_scheme }}{% else %}http{% endif %}://{{ hostname }}:{{ etcd_client_port }}{% if not loop.last %},{% endif %}{% endfor %}"
    conf_file: "/tmp/flannel-conf.json"
    conf_loc: "/{{ cluster_name }}/network/config"
  run_once: true
  delegate_to: "{{ groups['etcd'][0] }}"

- name: Create flannel config file to go in etcd
  template: src=flannel-conf.json.j2 dest={{ conf_file }}
  run_once: true
  delegate_to: "{{ groups['etcd'][0] }}"

- name: Load the flannel config file into etcd
  shell: "/usr/bin/etcdctl {% if etcd_url_scheme is defined and etcd_url_scheme == 'https' %} --cert-file={{ flannel_etcd_cert_file }} --key-file={{ flannel_etcd_key_file }} --ca-file={{ flannel_etcd_ca_file }} {% endif %}--no-sync --peers={{ peers }} set {{ conf_loc }} < {{ conf_file }}"
  run_once: true
  delegate_to: "{{ groups['etcd'][0] }}"

- name: Clean up the flannel config file
  file: path=/tmp/flannel-config.json state=absent
  run_once: true
  delegate_to: "{{ groups['etcd'][0] }}"

- name: Force to use github-release when packages are not available
  set_fact:
    flannel_source_type: "github-release"
  when: is_ubuntu

- name: Install Flannel with package manager
  action: "{{ ansible_pkg_mgr }}"
  args:
        name: flannel
        state: latest
  when: flannel_source_type != "github-release"

- set_fact:
    flannel_use_upstart: false

- set_fact:
    flannel_use_upstart: true
  when: is_earlier_than_ubuntu_16_04

- name: Install Flannel with github release
  include: install-github-release.yml
  when: flannel_source_type == "github-release"

- name: Set Flannel config file directory
  set_fact:
    flannel_config_dir: "/etc/sysconfig"

- name: Override Flannel config file directory for Ubuntu
  set_fact:
    flannel_config_dir: "/etc/flannel"
  when: flannel_use_upstart

- name: Create config file directory
  file: path={{ flannel_config_dir }} state=directory

- name: Install Flannel config file
  template: src=flanneld.j2 dest={{ flannel_config_dir }}/flanneld
  notify:
    - restart flannel

- name: Ubuntu | Configure Docker to use Flannel network
  lineinfile:
       dest: "{{ docker_config_dir }}/docker"
       state: "{{ item.state }}"
       line: "{{ item.line }}"
       regexp: "{{ item.regexp }}"
  with_items:
    - { line: '', regexp: '. /run/flannel/subnet.env' , state: 'absent'}
    - { line: '',regexp: '^DOCKER_OPTS=' , state: 'absent' }
    - { line: '. /run/flannel/subnet.env', regexp: '. /run/flannel/subnet.env' , state: 'present'}
    - { line: 'DOCKER_OPTS="--bip ${FLANNEL_SUBNET} --mtu ${FLANNEL_MTU}"',regexp: '^DOCKER_OPTS=' , state: 'present' }
  when: is_earlier_than_ubuntu_16_04
  notify:
    - restart flannel

- ufw:
    state: enabled
    rule: allow
    proto: udp
    port: 8472

- ufw:
    rule: allow
    route: yes
    interface: flannel.1
    direction: in

- ufw:
    rule: allow
    route: yes
    interface: flannel.1
    direction: out

- name: Enable flannel
  service: name=flanneld enabled=yes

- name: Start flannel
  service: name=flanneld state=started
  register: flannel_started
  notify:
    - restart docker
